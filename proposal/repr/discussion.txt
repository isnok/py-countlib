this has quality of a bug.
the python docs state, that __repr__ is to return a machine readable representation of the object (reference!!)
furtheron __str__ be the method to return a human-readable representation.

what happens, is that the items are sorted (!most_common?) prior to stringification.
is this really needed for a machine-readable representation?
sorting the stringified items would be possible too (and faster), but less human-comprehendable from my point of view.
also there is rarely a benefit from using most_common.
looking closely we can see, that the sorting is done *only* by the count wich is not guaranteed to be unique. thus not even a stable way of outputting Counters is archieved by the current implementation.
I guess, that people rarely test the stringification of a Counter against another. What matters much more i guess is the fact that you can just re-eval the string and get your counter back.
But implementing this would also help the use of counters in doctests. Maybe even some people have some doctests out there that need to be fixed, but hey, they were built on the wrong a slightly wrong assumption, that the (only) stringification counters offer would be somewhat stable.
